[
    {
        "name": "NOVELIZE",
        "preview": "Novelize is a full-stack application that gives novelists an integrated writing environment. It runs on React, Node, Express, and MySQL.",
        "git_link": "https://github.com/vleague2/novelize",
        "site_link": "https://novel-ize.herokuapp.com/",
        "image": "img/editor.png",
        "description": "Novelize is a full-stack application created for writers in the process of drafting a novel. It was created to solve the problem of juggling multiple documents containing prose, character profiles, plot outlines, research notes, and worldbuilding systems. Novelize pulls this data into an integrated drafting environment in which the user can write the prose of their story with access to sidebars containing the references they'll need during the writing process.<br><br>Other drafting software are costly, outdated, and overcomplicated. Novelize is a free, easy-to-use application with a clean and modern UI. It's focused solely on the act of writing the novel so that user can flow through the process seamlessly.<br><br>You can log in to the site using the following credentials, but please be respectful of the data associated with this test account:<br><ul><li class='project-text'> Username: user@test.com </li><li class='project-text'> Password: password</li></ul>",
        "tech": ["<b>React.js:</b> front-end UI library and state manager", "<b>Bootstrap:</b> front-end component library", "<b>Node.js:</b> server-side programming", "<b>Express.js:</b> server-side routing and application setup", "<b>MySQL with Sequelize and JawsDB:</b> store user's relational story data", "<b>Passport.js:</b> handle user authentication and session tokens", "<b>Heroku:</b> deploy and host application"],
        "timeline": ["<b>Conception:</b> initial idea sometime in December of 2017", "<b>Wireframing:</b> began May 25, 2018", "<b>Version 1 Development:</b> happened over a two-week period beginning June 1, 2018", "<b>Version 1 Deployment:</b> June 13, 2018"],
        "challenges": ["One major challenge with this project was coding the front-end in React.js with only one week of exposure to the technology. I solved this problem through many hours of self-guided research and practice.", "Designing the flow of the editing page was a challenge due to the amount of data coming into the sidebars. Choosing what to display and in what location required me to really think about the project from the user's perspective in terms of usability and modern feel.", "The plot page presented a challenging bit of logic and design -- it includes a visual timeline that is all custom CSS (and will one day be more interactive), while the plot points included on this page required some reordering logic in the event that a user deletes plot point 2 out of 5 and the other plot points must now be updated in the correct order."],
        "goals": ["<b>Home page design:</b> the landing page will include more information about the features of the application and present a more user-friendly design", "<b>Import/export:</b> user will be able to import and export stories and data", "<b>Version history:</b> user will have access to multiple draft versions and other editing history", "<b>Plot items:</b> user will be able to reorder plot points", "<b>Visual timeline:</b> when drafting,the user will be able to see where they are in the plot timeline", "<b>Emails:</b> Novelize will send reminder emails to users if they have not returned in a specified amount of time", "<b>Account settings:</b> user will be able to edit their account settings", "<b>Sessions:</b> Novelize will store and pass session data more securely", "<b>Authentication:</b> more login options will be available, such as Google and Facebook", "<b>Responsiveness:</b> Novelize will be fully mobile responsive or have a mobile app"]
    },
    {
        "name": "LIL LIBS",
        "preview": "Lil Libs is a full-stack game inspired by MadLibs and focused on popculture stories. It runs on Handlebars, Node, Express, and MySQL.",
        "git_link": "https://github.com/vleague2/req.libs",
        "site_link": "https://req-libs.herokuapp.com/",
        "image": "img/lillibs.png",
        "description": "Lil Libs is a Madlibs-inspired game developed by a 4-person team. In this project, I worked as project manager and designer, and jumped in to solve problems and clean code in all areas, including front-end Javascript, back-end Node.js logic, and Handlebars implementation. <br><br> Lil Libs is a unique rendition of the Madlibs word-game style that focuses on popculture stories, and allows users to submit their own stories to the database. It's intended to be fun and easy to use. The full stories that you see in the application were hand-picked by our team -- because the user will be interacting with the stories themselves, we felt it was important to be deliberate in our choices.<br><br> To use the application, you can login with your Google account or create a local account on our database. Lil Libs is mobile-friendly, as we believe that the game offers a lot of value to an audience on-the-go. <br><br> Please be mindful that user-submitted stories are not currently screened for quality.",
        "tech": ["<b>Handlebars:</b> front-end templating", "<b>Bootstrap:</b> front-end component library", "<b>Node.js:</b> server-side programming", "<b>Express.js:</b> server-side routing and application setup", "<b>MySQL with Sequelize and JawsDB:</b> store all story and user data", "<b>Passport.js:</b> handle user authentication and session tokens", "<b>Heroku:</b> deploy and host application"],
        "timeline": ["<b>Conception:</b> May 9, 2018", "<b>Planning:</b> May 9-10, 2018", "<b>Version 1 Development:</b> happened over a one-week period beginning May 10, 2018", "<b>Version 1 Deployment:</b> May 15, 2018"],
        "challenges": ["One major challenge with this project was figuring out how to input stories into the database with the word blanks labeled, and then generate the appropriate blanks upon sending the data to the user. Our team's database designer used some clever logic to make this happen, and to make it easy to save and view the user's stories.", "We faced some difficulties passing around the user's session information. This was our first time using Passport, and so we ended up passing the user ID through the URL. This is something we'd like to refactor.", "The functionality behind the user adding a story provided a challenge due to the way we structured our database seeds. Currently, the stories make use of asterisks to show where blanks will go. Creating the input form for users to type out their story and add in blanks proved to be a logic challenge, but we solved it by utilizing a button that adds in the database-required asterisks in place of the user's blanks."],
        "goals": ["<b>Home page redesign:</b> the application's home page could benefit from a more modern design, as well as more information about the application so that the user is guided through playing the game", "<b>Admin screening:</b> application admins will be able to review and approve user-submitted stories before they are displayed to all users", "<b>Multiplayer:</b> users will be able to create a game that their friends can join, and the application will provide live chat features", "<b>Community voting:</b> the application's home page will display user-created stories that are popular with the community and will have a voting section so that users can view others' completed stories and upvote their favorites", "<b>Story visibility:</b> with the advent of voting on stories, users will be able to choose whether or not their finished stories are private or public"]
    },
    {
        "name": "ORLANDO PET FINDER",
        "preview": "Orlando Pet Finder is a full-stack application that helps Orlando pet seekers find a pet that fits their lifestyle based on a 10-question quiz. Pet Finder uses Handlebars, Node, and Express.",
        "git_link": "https://github.com/vleague2/pet-finder",
        "site_link": "https://petfinder-orlando.herokuapp.com/",
        "image": "img/petfinder.png",
        "description": "Orlando Pet Finder  is a full-stack Javascript application created during the UCF Coding Bootcamp program. It uses a 10-question quiz to determine the user's lifestyle and pet needs, and then compares the user's answers to a JSON list of adoptable pets in order to find the best match. The application will recommend a pet to the user at the conclusion of the quiz, at which point the user has the option to retake the quiz if they don't like their result.<br><br> This application's main focus is the quiz itself -- many other pet adoption sites provide you with many animals to adopt, but Pet Finder Orlando matches you with a pet based on your needs and the pet's needs. This helps people find a pet that suits their lifestyle rather than choosing arbitrarily from an overwhelming list.",
        "tech": ["<b>Bootstrap:</b> front-end component library", "<b>jQuery:</b> client-side logic", "<b>Node.js:</b> server-side programming", "<b>Express.js:</b> server-side routing and application setup", "<b>Heroku:</b> deploy and host application"],
        "timeline": ["<b>Conception:</b> May 1, 2018", "<b>Version 1 Development:</b> May 1-3, 2018", "<b>Version 1 Deployment:</b> May 3, 2018"],
        "challenges": ["The algorithm that determines the best pet match for the user presented a challenging bit of logic. I hard-coded in scores for each pet and then used some forEach loops to compare the user's score to each pet's score and then find the closest match, but I would prefer to refactor this in the future and make it more dynamic for pets being entered into the database by local shelters.", "The quiz questions themselves are an important piece of this application and were challenging to create in a way that covered many areas of consideration when adopting a pet. I spent time drafting and rewriting these questions, but they can still benefit from improvements."],
        "goals": ["<b>More pet matches:</b> the application currently only has cats available, and will need far more options for users", "<b>Database storage:</b> pet data will be stored in a database rather than in a JSON file", "<b>Add a pet</b>: allow shelters and other users to add a pet to the database of adoptable pets", "<b>Pet information:</b> the application will pull in pet and adoption information from local shelters so that the user can seamlessly continue the adoption process", "<b>User accounts:</b> users will be able to make an account and save their favorite pets so that they can choose the right pet at the right time", "<b>Refactoring:</b> the code and quiz should be refactored to be more efficient and effective"]
    },
    {
        "name": "PROJECT MOVE",
        "preview": "Project Move is a front-end application that uses multiple APIs to suggest outdoor activities to the user based on their city. Project Move uses Javascript and Materialize.",
        "git_link": "https://github.com/vleague2/project_move",
        "site_link": "https://vleague2.github.io/project_move/",
        "image": "img/projectmove.png",
        "description": "Project Move is a front-end Javascript application created by a 4-person team of developers. It is intended for use by individuals looking for outdoor activities in their area, and provides suggestions based on the current weather. The application currently supports day-time weather and activities.<br><br> In this project, I worked as project manager, handled the integration of the Google Places API, assisted with design, and jumped in to solve code issues wherever needed. <br><br> Project Move integrates four APIs to pull in outdoor activity data, weather data, and map data. The application uses client-side Javascript to dynamically render the search results page.",
        "tech": ["<b>Materialize:</b> front-end component library", "<b>jQuery:</b> client-side logic", "<b>Google Places API:</b> pull in park data", "<b>Google Maps API:</b> generate a Google map with the chosen location's pin", "<b>Open Weather Map API:</b> pull in current weather and latitude/longitude of user-entered city", "<b>Trails API:</b> pull in segmented trail data", "<b>Firebase:</b> store user search query"],
        "timeline": ["<b>Conception:</b> April 12, 2018", "<b>Version 1 Development:</b> April 12-17, 2018", "<b>Version 1 Deployment:</b> April 17, 2018"],
        "challenges": ["This project presented an immediate challenge for our team -- we were moving along with a separate idea that became unviable due to API complications. We had to pivot within just a few hours, which was a difficult and stressful situation. However, we were able to work together to land on Project Move, and we all learned a lot about handling a crisis in a project.","Working with multiple API calls was a challenge in this project. We wanted to avoid firing multiple calls simultaneously, as this could negatively impact the flow of the application. To solve this issue, we nested functions inside each other to control the order of the API calls. This is not the best solution, and a refactor is one main goal for this project moving forward, but it did solve the issue at the time.", "Dynamically generating the results page was great practice in Javascript, but presented some difficulties as far as layout. When the user selects a park or activity location, we append more data about their chosen option to the page. We had difficulties placing this data where wanted it (originally under the map), but were able to find a second option for the data -- above the map -- and retain the usability we needed."],
        "goals": ["<b>Code refactor:</b> the Javascript code would benefit greatly from a refactor that pulls out each function and makes it more reusable", "<b>Weather recommendations:</b> the application currently uses hard-coded suggestions for activities based on the weather, and should be more dynamic; it also needs support for night-time activities and weather", "<b>More activities:</b> the app should feature more activity options", "<b>User login:</b> allow the user to create an account and save locations and activities", "<b>International location support:</b> the app will provide more options for international users", "<b>Firebase:</b> utilize Firebase to store more data about user searches and then display most popular or most recent user searches to the client"]
    },
    {
        "name": "PUSHEEN CLICKY GAME",
        "preview": "This is a front-end React.js game featuring the popular cat character Pusheen. It utilizes state to track the user's clicks on 12 different Pusheen images.",
        "git_link": "https://github.com/vleague2/clicky-game",
        "image": "img/pusheen.png"
    }    
]